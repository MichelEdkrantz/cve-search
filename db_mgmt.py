#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Manager for the database
#
# Copyright (c) 2012 		Wim Remens
# Copyright (c) 2012-2014 	Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2014-2015 	Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
# make sure these modules are available on your system
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "./lib/"))

import pymongo


import multiprocessing
import argparse
import datetime
from urllib.request import urlopen
from xml.sax import make_parser
from xml.sax.handler import ContentHandler

from Config import Configuration

# parse command line arguments
argparser = argparse.ArgumentParser(description='populate/update the local CVE database')
argparser.add_argument('-u', action='store_true', help='update the database')
argparser.add_argument('-p', action='store_true', help='populate the database')
argparser.add_argument('-d', action='store_true', help='drop any current cve database')
argparser.add_argument('-a', action='store_true', default=False, help='force populating the CVE database')
argparser.add_argument('-f', help='process a local xml file')
argparser.add_argument('-v', action='store_true', help='verbose output')
args = argparser.parse_args()


# init parts of the file names to enable looped file download
file_prefix = "nvdcve-2.0-"
file_suffix = ".xml"
file_mod = "modified"
file_rec = "recent"

# get the current year. This enables us to download all CVE's up to this year :-)
date = datetime.datetime.now()
year = date.year+1

cveStartYear = Configuration.getCVEStartYear()

cveStartYear = 2002

# define the CVE parser. Thanks to Meredith Patterson (@maradydd) for help on this one.

 
class CVEHandler(ContentHandler):

    def __init__(self):
        self.cves = []
        self.values = {}
        self.currentAttr = None
        self.attributes = {
            'cvss:score': 'cvss_score',
            'cvss:access-vector': 'cvss_access_vector',
            'cvss:access-complexity': 'cvss_access_complexity',
            'cvss:authentication': 'cvss_authentication',
            'cvss:confidentiality-impact': 'cvss_confidentiality_impact',
            'cvss:integrity-impact': 'cvss_integrity_impact',
            'cvss:availability-impact': 'cvss_availability_impact',
            'cvss:source': 'cvss_source',
            'vuln:security-protection': 'security_protection',
            'vuln:summary': 'summary',
            'vuln:published-datetime': 'published',
            'vuln:last-modified-datetime': 'last_modified',
        }
    
    def startElement(self, name, attrs):
        if name == 'entry':
            self.cves.append({
                'id': attrs.get('id'), 
                'references': [],
                'vulnerable_configuration': []
            })
            self.ref = attrs.get('id')

        elif name in self.attributes:
            self.values[name] = ""
            self.currentAttr = name

        elif name == 'cpe-lang:fact-ref':
            self.cves[-1]['vulnerable_configuration'].append(attrs.get('name'))
        
        elif name == 'vuln:references':
            self.cves[-1]['references'].append({
                'reference_type': attrs.get('reference_type')
            })

        elif name == 'vuln:reference':
            self.cves[-1]['references'][-1]['href'] = attrs.get('href')
            
        elif name == 'vuln:source':
            self.values[name] = ""
            self.currentAttr = name    

        elif name == 'vuln:cwe':
            self.cves[-1]['cwe'] = attrs.get('id')

    def characters(self, content):
        if not self.currentAttr is None:
            self.values[self.currentAttr] += content

    def endElement(self, name):
        #for all our element we want to extract directly
        if name in self.attributes:
            new_key = self.attributes[self.currentAttr]
            self.cves[-1][new_key] = self.values[name]
        
        if name == 'vuln:source':
            self.cves[-1]['references'][-1]['source'] = self.values[name]

        self.currentAttr = None


def parseXML(xml):
    if args.v:
        print("Starting parsing")
    # get your parser on !!
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(xml)
    return ch

# Upsert an item
def upsertItem(item):
    # check if the CVE already exists.
    x=collection.find({'id': item['id']})
    # if so, update the entry.
    prepareItem(item)
    if x.count() > 0:
        collection.update({'id': item['id']}, {"$set": item})
    else:
        collection.insert(item)

def prepareItem(item):
    if 'cvss_score' not in item:
        item['cvss_score'] = None
    else:
        item['cvss_score'] = float(item['cvss_score'])

def download(url):
    if args.v:
        print("Downloading: " + url)
    return urlopen(url)


# process in parallel
def importFromUrl(url):
    f = download(getfile)
    ch = parseXML(f)
    
    for item in ch.cves:
        prepareItem(item)

    # check if year is not cve-free
    if len(ch.cves) != 0:
        ret = collection.insert(ch.cves)
        if ret:
            print ("Year " + str(x) + " done, imported " + str(len(ch.cves)) + " CVEs")
    else:
        print ("Year " + str(x) + " has no CVE's.")

# Main
if __name__=='__main__':
    # connect to the DB.
    db = Configuration.getMongoConnection()
    collection = db.cves
    info = db.info
     
    # start here if it's an update.
    if args.u:
        # get the 'modified' file
        getfile = Configuration.getCVEDict() + file_prefix + file_mod + file_suffix
        f = download(getfile)
        
        i = info.find_one({'db': 'cve'})
        if i is not None:
            if f.headers['last-modified'] == i['last-modified']:
                sys.exit("Not modified")
        
        info.update({'db': 'cve'}, {"$set": {'last-modified': f.headers['last-modified']}}, upsert=True)
        
        ch = parseXML(f)
        for item in ch.cves:
            upsertItem(item)
        
        # get the 'recent' file
        getfile = Configuration.getCVEDict() + file_prefix + file_rec + file_suffix
        f = download(getfile)
        ch = parseXML(f)
        for item in ch.cves:
            upsertItem(item)
    
    elif args.p:
        # populate is pretty straight-forward, just grab all the files from NVD
        # and dump them into a DB.
        if args.d:
            if args.v:
                print("Dropping CVE collection")
            collection.drop()

        c = collection.count()
        if args.v:
            print(str(c))
        if c > 0 and args.a is False:
            print("Database already populated")
        else:
            print("Database population started")

            jobs = []

            for x in range(cveStartYear,year):
                
                getfile = Configuration.getCVEDict() + file_prefix + str(x) + file_suffix
                
                p = multiprocessing.Process(target=importFromUrl, args=(getfile,))
                jobs.append(p)
                p.start()

            [p.join() for p in jobs]
                
